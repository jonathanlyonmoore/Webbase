/*
   The Stanford WebBase Project <webbase@db.stanford.edu>
   Copyright (C) 1999-2002 The Board of Trustees of the
   Leland Stanford Junior University
   
   This program is free software; you can redistribute it and/or
   modify it under the terms of the GNU General Public License
   as published by the Free Software Foundation; either version 2
   of the License, or (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
*/
//------------------------------------------------------------------------
// Copyright (C) Sewell Development Corporation, 1994 - 1998.
//     Web: www.sewelld.com      E-mail: support@sewelld.com
//
// LICENSE: This source code was generated by CrcGen, a product of Sewell
// Development Corporation.  Paid-up licensees of CrcGen are authorized to
// use this code on a site-wide basis without restriction as to
// the type of product it is incorporated in, except that it may not be
// resold as stand-alone CRC code, and the copyright notice and license
// agreement must not be removed from the code.
//------------------------------------------------------------------------

// Interface definition for 64-bit CRC (cyclic redundancy check) class:
//     Polynomial:                 E543279765927881
//     Initial CRC register value: FFFFFFFFFFFFFFFF
//     Reflected input and output: No
//     Inverted final output:      No
//     CRC of string "123456789":  44F0026F7CFAA3EC

#ifndef _Crc64_H_
#define _Crc64_H_

class Crc64 {
public:
    Crc64() {
        m_crc = 0xFFFFFFFFFFFFFFFFLL;
    }
    Crc64(const void* buffer, unsigned int count) {
        m_crc = 0xFFFFFFFFFFFFFFFFLL;
        Compute(buffer, count);
    }
    void reset();
    void Compute(const void* buffer, unsigned int count);
    void Compute(unsigned char value);
    operator unsigned long long () const {
        return m_crc;
    }

private:
    unsigned long long m_crc;
};

#endif
