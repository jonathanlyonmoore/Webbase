/*
   The Stanford WebBase Project <webbase@db.stanford.edu>
   Copyright (C) 1999-2002 The Board of Trustees of the
   Leland Stanford Junior University
   
   This program is free software; you can redistribute it and/or
   modify it under the terms of the GNU General Public License
   as published by the Free Software Foundation; either version 2
   of the License, or (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
*/
//------------------------------------------------------------------------
// Copyright (C) Sewell Development Corporation, 1994 - 1998.
//     Web: www.sewelld.com      E-mail: support@sewelld.com
//
// LICENSE: This source code was generated by CrcGen, a product of Sewell
// Development Corporation.  Paid-up licensees of CrcGen are authorized to
// use this code on a site-wide basis without restriction as to
// the type of product it is incorporated in, except that it may not be
// resold as stand-alone CRC code, and the copyright notice and license
// agreement must not be removed from the code.
//------------------------------------------------------------------------
#include "Crc64.h"

// Implementation of 64-bit CRC (cyclic redundancy check) class:
//     Polynomial:                 E543279765927881
//     Initial CRC register value: FFFFFFFFFFFFFFFF
//     Reflected input and output: No
//     Inverted final output:      No
//     CRC of string "123456789":  44F0026F7CFAA3EC

static unsigned long long m_table64n[256] = {
    0x0000000000000000ULL, 0xE543279765927881ULL, 0x2FC568B9AEB68983ULL, 0xCA864F2ECB24F102ULL,
    0x5F8AD1735D6D1306ULL, 0xBAC9F6E438FF6B87ULL, 0x704FB9CAF3DB9A85ULL, 0x950C9E5D9649E204ULL,
    0xBF15A2E6BADA260CULL, 0x5A568571DF485E8DULL, 0x90D0CA5F146CAF8FULL, 0x7593EDC871FED70EULL,
    0xE09F7395E7B7350AULL, 0x05DC540282254D8BULL, 0xCF5A1B2C4901BC89ULL, 0x2A193CBB2C93C408ULL,
    0x9B68625A10263499ULL, 0x7E2B45CD75B44C18ULL, 0xB4AD0AE3BE90BD1AULL, 0x51EE2D74DB02C59BULL,
    0xC4E2B3294D4B279FULL, 0x21A194BE28D95F1EULL, 0xEB27DB90E3FDAE1CULL, 0x0E64FC07866FD69DULL,
    0x247DC0BCAAFC1295ULL, 0xC13EE72BCF6E6A14ULL, 0x0BB8A805044A9B16ULL, 0xEEFB8F9261D8E397ULL,
    0x7BF711CFF7910193ULL, 0x9EB4365892037912ULL, 0x5432797659278810ULL, 0xB1715EE13CB5F091ULL,
    0xD393E32345DE11B3ULL, 0x36D0C4B4204C6932ULL, 0xFC568B9AEB689830ULL, 0x1915AC0D8EFAE0B1ULL,
    0x8C19325018B302B5ULL, 0x695A15C77D217A34ULL, 0xA3DC5AE9B6058B36ULL, 0x469F7D7ED397F3B7ULL,
    0x6C8641C5FF0437BFULL, 0x89C566529A964F3EULL, 0x4343297C51B2BE3CULL, 0xA6000EEB3420C6BDULL,
    0x330C90B6A26924B9ULL, 0xD64FB721C7FB5C38ULL, 0x1CC9F80F0CDFAD3AULL, 0xF98ADF98694DD5BBULL,
    0x48FB817955F8252AULL, 0xADB8A6EE306A5DABULL, 0x673EE9C0FB4EACA9ULL, 0x827DCE579EDCD428ULL,
    0x1771500A0895362CULL, 0xF232779D6D074EADULL, 0x38B438B3A623BFAFULL, 0xDDF71F24C3B1C72EULL,
    0xF7EE239FEF220326ULL, 0x12AD04088AB07BA7ULL, 0xD82B4B2641948AA5ULL, 0x3D686CB12406F224ULL,
    0xA864F2ECB24F1020ULL, 0x4D27D57BD7DD68A1ULL, 0x87A19A551CF999A3ULL, 0x62E2BDC2796BE122ULL,
    0x4264E1D1EE2E5BE7ULL, 0xA727C6468BBC2366ULL, 0x6DA189684098D264ULL, 0x88E2AEFF250AAAE5ULL,
    0x1DEE30A2B34348E1ULL, 0xF8AD1735D6D13060ULL, 0x322B581B1DF5C162ULL, 0xD7687F8C7867B9E3ULL,
    0xFD71433754F47DEBULL, 0x183264A03166056AULL, 0xD2B42B8EFA42F468ULL, 0x37F70C199FD08CE9ULL,
    0xA2FB924409996EEDULL, 0x47B8B5D36C0B166CULL, 0x8D3EFAFDA72FE76EULL, 0x687DDD6AC2BD9FEFULL,
    0xD90C838BFE086F7EULL, 0x3C4FA41C9B9A17FFULL, 0xF6C9EB3250BEE6FDULL, 0x138ACCA5352C9E7CULL,
    0x868652F8A3657C78ULL, 0x63C5756FC6F704F9ULL, 0xA9433A410DD3F5FBULL, 0x4C001DD668418D7AULL,
    0x6619216D44D24972ULL, 0x835A06FA214031F3ULL, 0x49DC49D4EA64C0F1ULL, 0xAC9F6E438FF6B870ULL,
    0x3993F01E19BF5A74ULL, 0xDCD0D7897C2D22F5ULL, 0x165698A7B709D3F7ULL, 0xF315BF30D29BAB76ULL,
    0x91F702F2ABF04A54ULL, 0x74B42565CE6232D5ULL, 0xBE326A4B0546C3D7ULL, 0x5B714DDC60D4BB56ULL,
    0xCE7DD381F69D5952ULL, 0x2B3EF416930F21D3ULL, 0xE1B8BB38582BD0D1ULL, 0x04FB9CAF3DB9A850ULL,
    0x2EE2A014112A6C58ULL, 0xCBA1878374B814D9ULL, 0x0127C8ADBF9CE5DBULL, 0xE464EF3ADA0E9D5AULL,
    0x716871674C477F5EULL, 0x942B56F029D507DFULL, 0x5EAD19DEE2F1F6DDULL, 0xBBEE3E4987638E5CULL,
    0x0A9F60A8BBD67ECDULL, 0xEFDC473FDE44064CULL, 0x255A08111560F74EULL, 0xC0192F8670F28FCFULL,
    0x5515B1DBE6BB6DCBULL, 0xB056964C8329154AULL, 0x7AD0D962480DE448ULL, 0x9F93FEF52D9F9CC9ULL,
    0xB58AC24E010C58C1ULL, 0x50C9E5D9649E2040ULL, 0x9A4FAAF7AFBAD142ULL, 0x7F0C8D60CA28A9C3ULL,
    0xEA00133D5C614BC7ULL, 0x0F4334AA39F33346ULL, 0xC5C57B84F2D7C244ULL, 0x20865C139745BAC5ULL,
    0x84C9C3A3DC5CB7CEULL, 0x618AE434B9CECF4FULL, 0xAB0CAB1A72EA3E4DULL, 0x4E4F8C8D177846CCULL,
    0xDB4312D08131A4C8ULL, 0x3E003547E4A3DC49ULL, 0xF4867A692F872D4BULL, 0x11C55DFE4A1555CAULL,
    0x3BDC6145668691C2ULL, 0xDE9F46D20314E943ULL, 0x141909FCC8301841ULL, 0xF15A2E6BADA260C0ULL,
    0x6456B0363BEB82C4ULL, 0x811597A15E79FA45ULL, 0x4B93D88F955D0B47ULL, 0xAED0FF18F0CF73C6ULL,
    0x1FA1A1F9CC7A8357ULL, 0xFAE2866EA9E8FBD6ULL, 0x3064C94062CC0AD4ULL, 0xD527EED7075E7255ULL,
    0x402B708A91179051ULL, 0xA568571DF485E8D0ULL, 0x6FEE18333FA119D2ULL, 0x8AAD3FA45A336153ULL,
    0xA0B4031F76A0A55BULL, 0x45F724881332DDDAULL, 0x8F716BA6D8162CD8ULL, 0x6A324C31BD845459ULL,
    0xFF3ED26C2BCDB65DULL, 0x1A7DF5FB4E5FCEDCULL, 0xD0FBBAD5857B3FDEULL, 0x35B89D42E0E9475FULL,
    0x575A20809982A67DULL, 0xB2190717FC10DEFCULL, 0x789F483937342FFEULL, 0x9DDC6FAE52A6577FULL,
    0x08D0F1F3C4EFB57BULL, 0xED93D664A17DCDFAULL, 0x2715994A6A593CF8ULL, 0xC256BEDD0FCB4479ULL,
    0xE84F826623588071ULL, 0x0D0CA5F146CAF8F0ULL, 0xC78AEADF8DEE09F2ULL, 0x22C9CD48E87C7173ULL,
    0xB7C553157E359377ULL, 0x528674821BA7EBF6ULL, 0x98003BACD0831AF4ULL, 0x7D431C3BB5116275ULL,
    0xCC3242DA89A492E4ULL, 0x2971654DEC36EA65ULL, 0xE3F72A6327121B67ULL, 0x06B40DF4428063E6ULL,
    0x93B893A9D4C981E2ULL, 0x76FBB43EB15BF963ULL, 0xBC7DFB107A7F0861ULL, 0x593EDC871FED70E0ULL,
    0x7327E03C337EB4E8ULL, 0x9664C7AB56ECCC69ULL, 0x5CE288859DC83D6BULL, 0xB9A1AF12F85A45EAULL,
    0x2CAD314F6E13A7EEULL, 0xC9EE16D80B81DF6FULL, 0x036859F6C0A52E6DULL, 0xE62B7E61A53756ECULL,
    0xC6AD22723272EC29ULL, 0x23EE05E557E094A8ULL, 0xE9684ACB9CC465AAULL, 0x0C2B6D5CF9561D2BULL,
    0x9927F3016F1FFF2FULL, 0x7C64D4960A8D87AEULL, 0xB6E29BB8C1A976ACULL, 0x53A1BC2FA43B0E2DULL,
    0x79B8809488A8CA25ULL, 0x9CFBA703ED3AB2A4ULL, 0x567DE82D261E43A6ULL, 0xB33ECFBA438C3B27ULL,
    0x263251E7D5C5D923ULL, 0xC3717670B057A1A2ULL, 0x09F7395E7B7350A0ULL, 0xECB41EC91EE12821ULL,
    0x5DC540282254D8B0ULL, 0xB88667BF47C6A031ULL, 0x720028918CE25133ULL, 0x97430F06E97029B2ULL,
    0x024F915B7F39CBB6ULL, 0xE70CB6CC1AABB337ULL, 0x2D8AF9E2D18F4235ULL, 0xC8C9DE75B41D3AB4ULL,
    0xE2D0E2CE988EFEBCULL, 0x0793C559FD1C863DULL, 0xCD158A773638773FULL, 0x2856ADE053AA0FBEULL,
    0xBD5A33BDC5E3EDBAULL, 0x5819142AA071953BULL, 0x929F5B046B556439ULL, 0x77DC7C930EC71CB8ULL,
    0x153EC15177ACFD9AULL, 0xF07DE6C6123E851BULL, 0x3AFBA9E8D91A7419ULL, 0xDFB88E7FBC880C98ULL,
    0x4AB410222AC1EE9CULL, 0xAFF737B54F53961DULL, 0x6571789B8477671FULL, 0x80325F0CE1E51F9EULL,
    0xAA2B63B7CD76DB96ULL, 0x4F684420A8E4A317ULL, 0x85EE0B0E63C05215ULL, 0x60AD2C9906522A94ULL,
    0xF5A1B2C4901BC890ULL, 0x10E29553F589B011ULL, 0xDA64DA7D3EAD4113ULL, 0x3F27FDEA5B3F3992ULL,
    0x8E56A30B678AC903ULL, 0x6B15849C0218B182ULL, 0xA193CBB2C93C4080ULL, 0x44D0EC25ACAE3801ULL,
    0xD1DC72783AE7DA05ULL, 0x349F55EF5F75A284ULL, 0xFE191AC194515386ULL, 0x1B5A3D56F1C32B07ULL,
    0x314301EDDD50EF0FULL, 0xD400267AB8C2978EULL, 0x1E86695473E6668CULL, 0xFBC54EC316741E0DULL,
    0x6EC9D09E803DFC09ULL, 0x8B8AF709E5AF8488ULL, 0x410CB8272E8B758AULL, 0xA44F9FB04B190D0BULL
};

void Crc64::reset()
{
  m_crc = 0xFFFFFFFFFFFFFFFFLL;
}

void Crc64::Compute(const void* buffer, unsigned int count)
{
    const unsigned char* ptr = (const unsigned char *) buffer;
    while (count--) {
        m_crc = m_table64n[((m_crc >> 56) ^ *ptr++)] ^ (m_crc << 8);
    }
}

void Crc64::Compute(unsigned char value)
{
     m_crc = m_table64n[((m_crc >> 56) ^ value)] ^ (m_crc << 8);
}
